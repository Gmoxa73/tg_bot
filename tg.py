import psycopg2
import random

from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup

print('Start telegram bot...')

state_storage = StateMemoryStorage()
token_bot = '7670973361:AAGPy486i_aCQpTl7BrzzquwEruFqIs06iY'
bot = TeleBot(token_bot, state_storage=state_storage)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(database = "tg", user = 'postgres', password = '000')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS users  (
    id SERIAL PRIMARY KEY,            -- —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)
    user_id BIGINT UNIQUE NOT NULL,   -- —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ
    name VARCHAR(100),                -- –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
''')

# –¢–∞–±–ª–∏—Ü–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ (–æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å)
cursor.execute('''
CREATE TABLE IF NOT EXISTS words (
    word_id SERIAL PRIMARY KEY,
    word VARCHAR(50) NOT NULL,        -- —Å–ª–æ–≤–æ
    translation VARCHAR(50) NOT NULL, -- –ø–µ—Ä–µ–≤–æ–¥
    is_global BOOLEAN DEFAULT TRUE   -- –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
);
''')

# –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS user_custom_words (
    word_id SERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,          -- —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    word VARCHAR(50) NOT NULL,        -- —Å–ª–æ–≤–æ
    translation VARCHAR(50) NOT NULL, -- –ø–µ—Ä–µ–≤–æ–¥
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
''')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
cursor.execute("SELECT COUNT(*) FROM words")
count = cursor.fetchone()[0]
if count is None:
    # –¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
    print("–û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ 'words' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞.")
else:
    if count == 0:
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('Peace', '–ú–∏—Ä', 'true');")
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('Hello', '–ü—Ä–∏–≤–µ—Ç', 'true');")
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('Put', '–ö–ª–∞—Å—Ç—å', 'true');")
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('Car', '–ú–∞—à–∏–Ω–∞', 'true');")
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('Black', '–ß–µ—Ä–Ω—ã–π', 'true');")
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('Yellow', '–ñ–µ–ª—Ç—ã–π', 'true');")
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('Fine', '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ', 'true');")
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('Who', '–ö—Ç–æ', 'true');")
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('What', '–ß—Ç–æ', 'true');")
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('Where', '–ì–¥–µ', 'true');")
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('Try', '–ü—Ä–æ–±–æ–≤–∞—Ç—å', 'true');")
        cursor.execute("INSERT INTO words (word, translation, is_global) VALUES ('Exit', '–í—ã—Ö–æ–¥', 'true');")

conn.commit()
cursor.close()


known_users = []
userStep = {}
buttons = []
user_state = {}


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
def get_next_word_id(cid):
    cursor = conn.cursor()
    cursor.execute('''SELECT * FROM (
        (
          SELECT w.word_id, w.word, w.translation
          FROM words w
          WHERE w.is_global = true
        )
        UNION ALL
        (
          SELECT ucw.word_id, ucw.word, ucw.translation
          FROM user_custom_words ucw
          WHERE ucw.user_id = %s
          AND ucw.word IS NOT NULL
        )
    ) AS combined
    ORDER BY RANDOM()
    LIMIT 1;''',(cid,))
    row = cursor.fetchone()
    print(row)
    cursor.close()
    return row if row else None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä—å
def start():
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, name FROM users')
    res = cursor.fetchall()
    for line in res:
        known_users.append({'cid': line[0], 'name': line[1]})
    print('Start', known_users)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(cid, name=""):
    p  = {}
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users WHERE user_id = %s', (cid,))
    row = cursor.fetchone()
    if row[0] == 0:
        cursor.execute('INSERT INTO users (user_id, name) VALUES (%s, %s)', (cid, name))
        conn.commit()
        p['cid'] = cid
        p['name'] = name
        known_users.extend(p)
        print('–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', name)
    cursor.close()
    return True

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def test_cid(cid):
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users WHERE user_id = %s', (cid,))
    row = cursor.fetchone()
    if row[0] != 0:
        return True
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_name_by_cid(cid):
    for user in known_users:
        if user['cid'] == cid:
            return user['name']
    return None  # –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
def other_cards(cid):
    cursor = conn.cursor()
    other_words = []
    cursor.execute('''
    SELECT * FROM (
        (
          SELECT w.word, w.translation
          FROM words w
          WHERE w.is_global = true
        )
        UNION ALL
        (
          SELECT ucw.word, ucw.translation
          FROM user_custom_words ucw
          WHERE ucw.user_id = %s
          AND ucw.word IS NOT NULL
        )
    ) AS combined
    ORDER BY RANDOM()
    LIMIT 4;
    ''', (cid,))
    rows = cursor.fetchall()
    cursor.close()
    for line in rows:
        if line[0]:
            other_words.append(line[0])
    return other_words

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞
def del_word(word):
    cursor = conn.cursor()
    try:
        cursor.execute('DELETE FROM user_custom_words WHERE word = %s', (word,))
        conn.commit()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        conn.rollback()
        return False
    finally:
        cursor.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞
def add_new_word(cid, new_word, translation):
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO user_custom_words (user_id, word, translation) VALUES (%s, %s, %s);",
            (cid, new_word, translation))
        conn.commit()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
        conn.rollback()
        return False
    finally:
        cursor.close()

#----------------------------------------------------------------------------------------------

@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id
    start()
    if not test_cid(cid):
        bot.send_message(cid, "Hello, stranger, let study English...")
        bot.send_message(cid, "Type your name...")
        userStep[cid] = 9
        print('Add name', userStep)
    else:
        bot.send_message(cid, f"Hello, {get_name_by_cid(cid)}")
        next_cards(message)

#-------------------------------------------------------------------------------------------------------

@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 9)
def save_new_name(message):
    cid = message.chat.id
    text = message.text.strip()
    add_user(cid, text)
    bot.send_message(cid, f"Hello, {text}")
    userStep[cid] = 0
    markup = types.ReplyKeyboardMarkup(row_width=2)

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    word_id, word, translate_word = get_next_word_id(cid)
    print('Start_word', word_id, word, translate_word)

    # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    target_word = word
    buttons.clear()
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    other_words = other_cards(cid)
    print(other_words)
    # —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö
    if target_word in other_words:
        other_words.remove(target_word)
    else:
        del other_words[0]
    other_words_btn = [types.KeyboardButton(word) for word in other_words]
    buttons.extend(other_words_btn)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])
    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate_word}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate_word
        data['other_words'] = other_words
    print('After new name userStep', userStep)

#--------------------------------------------------------------------------------------------------------

@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    cid = message.chat.id
    word_id, word, translate_word = get_next_word_id(cid)
    print('Start_word', word_id, word, translate_word)
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(row_width=2)

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
    target_word = word
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate_word
    print('Data1', data)
    other_words = other_cards(cid)
    if target_word in other_words:
        other_words.remove(target_word)
    else:
        del other_words[0]
    buttons.clear()

    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    other_words_btn = [types.KeyboardButton(word) for word in other_words]
    buttons.extend(other_words_btn)

    random.shuffle(buttons)

    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)

    buttons.extend([next_btn, add_word_btn, delete_word_btn])
    markup.add(*buttons)

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\nüá∑üá∫ {translate_word}", reply_markup=markup)

#---------------------------------------------------------------------------------------------------------

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    cid = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with bot.retrieve_data(message.from_user.id, cid) as data:
        target_word = data.get('target_word')
    print('Data2', data)
    if not target_word:
        bot.send_message(cid, "–ù–µ—Ç —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    else:
        if del_word(target_word):
            bot.send_message(cid, f"–°–ª–æ–≤–æ {target_word} —É–¥–∞–ª–µ–Ω–æ.")
            print('Delete', target_word)
        else:
            bot.send_message(cid, f"–°–ª–æ–≤–æ {target_word} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º.")
    next_cards(message)

#-------------------------------------------------------------------------------------------------------

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['adding'] = True
    bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:")
    print('data', data)

#--------------------------------------------------------------------------------------------------------

@bot.message_handler(func=lambda message: get_user_step(message.chat.id) == 1)
def save_new_word(message):
    cid = message.chat.id
    text = message.text.strip()
    # –í —Å–ª—É—á–∞–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    if 'new_word' not in user_state.get(cid, {}):
        user_state.setdefault(cid, {})['new_word'] = text
        bot.send_message(cid, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞:")
    else:
        new_word = user_state[cid]['new_word']
        print('new', new_word)
        translation = text
        print(translation)
        add_new_word(cid, new_word, translation)
        # –û—á–∏—Å—Ç–∫–∞
        del user_state[cid]
        userStep[cid] = 0

        next_cards(message)

#--------------------------------------------------------------------------------------------------------------

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∏–∂–µ
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    cid = message.chat.id
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        print('ex', data)
    target_word = data['target_word']

    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons.clear()
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    # —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö
    other_words = other_cards(cid)
    if target_word in other_words:
        other_words.remove(target_word)
    else:
        del other_words[0]
    other_words_btn = [types.KeyboardButton(word) for word in other_words]
    buttons.extend(other_words_btn)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])
    markup.add(*buttons)

    if message.text == target_word:
        bot.send_message(message.chat.id, "–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')

bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)
